namespace sample ;

use com.ibm.streamsx.regex::* ;
use com.ibm.streamsx.regex.xpressive::* ;

/**
* Run functional tests using native functions.
* 
* * Functional tests for interpreted and compiled partial/full matches.
* 
* The output:
* * regexPartialMatch: 'Hello world' matches '^Hello': true
* * regexFullMatch: 'Hello world' matches '^Hello': true
* * regexPartialMatch: 'Hello world' matches '^Hello': true
* * regexFullMatch: 'Hello world' matches '^Hello': false
* * regexFullMatch: 'Hello world' matches 'Hello world$': true
*/

composite RegexReplaceXPSample
{
	graph
		() as Custom_1 = Custom()
		{
			logic
				state : {
					// regexCompile can be called within a state
					boolean _ = regexCompile("^Hello", RegexPattern._1); // Compile and index regex pattern _1
				}
				onProcess :
				{
					// regexCompile can be called inside logic processing - nevertheless the compilation will run only once on the first call
					regexCompile("Hello world$", RegexPattern._2); // Compile and index regex pattern _2

					// Simple partial match (similar to SPL regex functions) - regex pattern is interpreted on each call (no compilation done)
					printString("regexPartialMatch: 'Hello world' matches '^Hello': ") ;
					println(regexPartialMatch("Hello world", "^Hello")) ;

					// Simple full match (the whole string is matched) - regex pattern is interpreted on each call (no compilation done)
					printString("regexFullMatch: 'Hello world' matches '^Hello world': ") ;
					println(regexFullMatch("Hello world", "^Hello world")) ;

					// Fast partial match - compiled regex pattern _1 is used
					printString("regexPartialMatch: 'Hello world' matches '^Hello': ") ;
					println(regexPartialMatch("Hello world", RegexPattern._1)) ;

					// Fast full match - compiled regex pattern _1 is used
					printString("regexFullMatch: 'Hello world' matches '^Hello': ") ;
					println(regexFullMatch("Hello world", RegexPattern._1)) ;

					// Fast full match - compiled regex pattern _2 is used
					printString("regexFullMatch: 'Hello world' matches 'Hello world$': ") ;
					println(regexFullMatch("Hello world", RegexPattern._2)) ;
				}

		}

}

