namespace sample;

use com.ibm.streamsx.regex.re2::RegexMatch;

/**
* Run two separate streams: performance test and functional test.
* 
* * Performance test - Beacon shoots 10,000,000 tuples. No output.
* * Functional test - Beacon outputs intermittently 2 patterns ("^Hello" and "Hello$") and 1 string to match ("Hello World " + count).
* 
* The result:
* * Hello World 0,true
* * Hello World 1,false
* * Hello World 2,true
* * Hello World 3,false
*/
composite RegexMatchSample {
	graph
		(stream<rstring str> Beacon_1_out0)as Beacon_1 = Beacon(){
			param
				iterations : 10000000 ;
			output
				Beacon_1_out0 : str = "Hello World" ;
		}

		(stream<rstring str, rstring pattern> Beacon_2_out0)as Beacon_2 = Beacon(){
			param
				iterations : 4 ;
			output
				Beacon_2_out0 :
					pattern = (int32)IterationCount() % 2 == 0 ? "^Hello" : "Hello$",
					str = "Hello World " + (rstring)IterationCount();
		}

		// Matching string with precompiled regex pattern (from parameter)
		(stream<rstring str, boolean result> RegexMatch_2_out0)as
			RegexMatch_2 = RegexMatch(Beacon_1_out0){
			param
				pattern : "^Hello" ;
			output
				RegexMatch_2_out0 : result = RegexPartialMatch(str);
		}

		// Matching string with updated precompiled regex pattern (from input attribute)
		(stream<rstring str, boolean result> RegexMatch_3_out0)as
			RegexMatch_3 = RegexMatch(Beacon_2_out0){
			output
				RegexMatch_3_out0 : result = RegexPartialMatch(str, pattern);
		}

		()as FileSink_3 = FileSink(RegexMatch_3_out0){
			param
				file : "/dev/stdout" ;
				quoteStrings : false;
		}
}
