namespace sample;

use com.ibm.streamsx.regex.re2::RegexMatchFused;

composite RegexMatchFusedSample {
	graph
		(stream<rstring search, boolean result, rstring pattern> Custom_1_out0)as
			Custom_1 = Custom(){
			logic
				onProcess : {
					// defines mutable tuple to hold search/result data   
					mutable tuple<Custom_1_out0> data = {search = "Hello World", result = false, pattern = "^Hello"};
					// defines mutable empty tuple to get result data   
					mutable tuple<Custom_1_out0> dataResult = {};
					// submits the data tuple by reference
					submit(data, Custom_1_out0);
					// swap data with result tuple to prevent compiler a tuple copying
					swap(data, dataResult);
					
					printString("The result is: ");
					println(dataResult.result);

					mutable tuple<Custom_1_out0> data1 = {search = "Hello World", result = false, pattern = "Hello$"};
					submit(data1, Custom_1_out0);
					swap(data1, dataResult);
					
					printString("The result is: ");
					println(dataResult.result);
				}

		}

		// Must run the operator fused with the caller operator (the caller must have mutable output port)
		// the operator will search first for optional patternAttr, otherwise uses pattern parameter 
		()as RegexMatchFused_2 = RegexMatchFused(Custom_1_out0){
			param
//				regexFunction : regexSimpleMatch ;
				regexFunction : regexPartialMatch ;
				searchAttr : search ;
				resultAttr : result ;
//				pattern: "^Hello" ;
				patternAttr : pattern ;
		}

	config
		placement : partitionColocation("FUSED");
}
