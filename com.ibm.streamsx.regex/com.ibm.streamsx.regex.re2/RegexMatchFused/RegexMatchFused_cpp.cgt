<%SPL::CodeGen::implementationPrologue($model);%>

<%
	my $inputPort = $model->getInputPortAt(0);
	my $outputPort = $model->getOutputPortAt(0);
	my $inTuple = $inputPort->getCppTupleName();

	my $logErrors = ($_ = $model->getParameterByName('logErrors')) ? $_->getValueAt(0)->getCppExpression() : "true";
	my $maxMemory = ($_ = $model->getParameterByName('maxMemory')) ? $_->getValueAt(0)->getCppExpression() : 1000000;

	my $pattern = ($_ = $model->getParameterByName('pattern')) ? $_->getValueAt(0)->getCppExpression() : '""';
	my $patternAttrParam = $model->getParameterByName("patternAttr");
	my $patternAttr = ($patternAttrParam) ? $patternAttrParam->getValueAt(0)->getCppExpression() : '""';

	my $regexFunction = ($_ = $model->getParameterByName('regexFunction')) ? $_->getValueAt(0)->getCppExpression() : "regexPartialMatch";

	my $resultAttrParamValue0 = $model->getParameterByName("resultAttr")->getValueAt(0);
	my $resultAttr = $resultAttrParamValue0->getCppExpression();
	my $resultType = $resultAttrParamValue0->getCppType();

	my $searchAttr = $model->getParameterByName("searchAttr")->getValueAt(0)->getCppExpression();
%>

bool MY_OPERATOR::regexFullMatch(const string & str) {
	return RE2::FullMatch(str, _regex) == 1;
}

bool MY_OPERATOR::regexFullMatch(const string & str, const string & pattern) {

	if(_regexMap.count(pattern) == 0) {
		AutoPortMutex am(_mutex, *this);
		string pat = pattern;
		_regexMap.insert(pat, new RE2(pattern, _options));
	}

	return RE2::FullMatch(str, _regexMap.at(pattern)) == 1;
}

bool MY_OPERATOR::regexPartialMatch(const string & str) {
	return RE2::PartialMatch(str, _regex) == 1;
}

bool MY_OPERATOR::regexPartialMatch(const string & str, const string & pattern) {

	if(_regexMap.count(pattern) == 0) {
		AutoPortMutex am(_mutex, *this);
		string pat = pattern;
		_regexMap.insert(pat, new RE2(pattern, _options));
	}

	return RE2::PartialMatch(str, _regexMap.at(pattern)) == 1;
}

bool MY_OPERATOR::regexSimpleMatch(const string & str) {
	return RE2::PartialMatch(str, <%=$pattern%>) == 1;
}

bool MY_OPERATOR::regexSimpleMatch(const string & str, const string & pattern) {
	return RE2::PartialMatch(str, pattern) == 1;
}

MY_OPERATOR::MY_OPERATOR() : _options(), _regex(<%=$pattern%>, _options) {
	_options.set_log_errors(<%=$logErrors%>);
	_options.set_max_mem(<%=$maxMemory%>);
}

MY_OPERATOR::~MY_OPERATOR() {}

void MY_OPERATOR::process(Tuple & tuple, uint32_t port) {
	IPort0Type & <%=$inTuple%> = static_cast<IPort0Type &>(tuple);

	<%=$resultType%> * result = &<%=$resultAttr%>;
	<% unless ($patternAttrParam) {%>
		*result = <%=$regexFunction%>(<%=$searchAttr%>);
	<%} else {%>
		*result = <%=$regexFunction%>(<%=$searchAttr%>, <%=$patternAttr%>);
	<%}%>
}

<%SPL::CodeGen::implementationEpilogue($model);%>
