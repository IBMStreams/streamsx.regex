#include <streams_boost/ptr_container/ptr_unordered_map.hpp>
#include <streams_boost/thread/tss.hpp>
#include "re2/re2.h"

<%SPL::CodeGen::headerPrologue($model);%>

using namespace std;
using streams_boost::ptr_unordered_map;
using streams_boost::thread_specific_ptr;

class MY_OPERATOR : public MY_BASE_OPERATOR 
{
public:
  MY_OPERATOR();
  virtual ~MY_OPERATOR(); 

  void process(Tuple const & tuple, uint32_t port);
  void process(Punctuation const & punct, uint32_t port);

private:
  typedef ptr_unordered_map<string, RE2> RegexMap;
  
  RE2::Options _options;
  RE2 _regex;

  Mutex _mutex;
  RegexMap _regexMap;
  static thread_specific_ptr<OPort0Type> otuplePtr_;

  OPort0Type * getOutputTuple();
  template<typename T>
  bool RegexFullMatch(const T & str);
  template<typename T>
  bool RegexFullMatch(const T & str, const rstring & pattern);
  template<typename T>
  bool RegexPartialMatch(const T & str);
  template<typename T>
  bool RegexPartialMatch(const T & str, const rstring & pattern);
  template<typename T>
  bool RegexSimpleMatch(const T & str, const rstring & pattern);
  
  re2::StringPiece getStringPiece(const rstring & str) { return re2::StringPiece(str.data(), str.size()); }
  re2::StringPiece getStringPiece(const blob & blb) { return re2::StringPiece(reinterpret_cast<const char*>(blb.getData()), blb.getSize()); }
}; 

<%SPL::CodeGen::headerEpilogue($model);%>
