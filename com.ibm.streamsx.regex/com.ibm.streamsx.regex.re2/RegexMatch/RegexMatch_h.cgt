#include <streams_boost/ptr_container/ptr_unordered_map.hpp>
#include <streams_boost/thread/tss.hpp>
#include "re2/re2.h"

<%SPL::CodeGen::headerPrologue($model);%>

using namespace std;
using streams_boost::ptr_unordered_map;
using streams_boost::thread_specific_ptr;

class MY_OPERATOR : public MY_BASE_OPERATOR 
{
public:
  MY_OPERATOR();
  virtual ~MY_OPERATOR(); 

  void process(Tuple const & tuple, uint32_t port);
  void process(Punctuation const & punct, uint32_t port);

private:
  RE2::Options _options;
  RE2 _regex;

  Mutex _mutex;
  ptr_unordered_map<rstring,RE2> _regexMap;
  static thread_specific_ptr<OPort0Type> otuplePtr_;

  OPort0Type * getOutputTuple();

  bool RegexFullMatch(const rstring & str);
  bool RegexFullMatch(const blob & blb);
  bool RegexFullMatch(const rstring & str, const rstring & pattern);
  bool RegexFullMatch(const blob & blb, const rstring & pattern);
  bool RegexPartialMatch(const rstring & str);
  bool RegexPartialMatch(const blob & blb);
  bool RegexPartialMatch(const rstring & str, const rstring & pattern);
  bool RegexPartialMatch(const blob & blb, const rstring & pattern);
  bool RegexSimpleMatch(const rstring & str, const rstring & pattern);
  bool RegexSimpleMatch(const blob & blb, const rstring & pattern);
}; 

<%SPL::CodeGen::headerEpilogue($model);%>
